package secret.palpatine;

import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.UIManager;

public class Main extends javax.swing.JFrame {

    public static List<Player> playerList = new ArrayList<>();
    public static List<Government> governments = new ArrayList<>();
    
    private static final double successPoint = .65, failPoint = 1;
    
    public Main() {
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        refresh();
    }
    
    public void refresh() {
        // save a list of selected players
        int[] selected = players.getSelectedIndices();
        List<Player> oldSelectedPlayers = new ArrayList<>(selected.length);
        for (int i = 0; i < selected.length; i++) {
            oldSelectedPlayers.add(playerList.get(selected[i]));
        }
        
        calculatePlayerSpyValues();
        Collections.sort(playerList);
        List<String> strings = getPlayerStrings();
        players.setListData(strings.toArray(new String[strings.size()]));
        
        
        // restore the selected players with their new indices
        for (int i = 0; i < oldSelectedPlayers.size(); i++) {
            selected[i] = playerList.indexOf(oldSelectedPlayers.get(i));
        }
        players.setSelectedIndices(selected);
        
        
        List<String> mStrings = new ArrayList<>();
        for (Government m : governments) {
            mStrings.add(m.getString());
        }
        log.setListData(mStrings.toArray(new String[mStrings.size()]));
    }
    
    public void calculatePlayerSpyValues() {
        for (Player p : playerList) {
            p.facistRating = 0;
            p.governments = 0;
            p.fails = 0;
            p.successes = 0;
        }
        for (Government m : governments) {
            for (Player p : m.participants) {
                if (m.success) {
                    p.facistRating -= successPoint;
                    p.successes++;
                } else {
                    p.facistRating += failPoint;
                    p.fails++;
                }
                p.governments++;
            }
        }
    }
    
    public void predictSpies() {
        /*
        int spyAmount = 3;
        List<Mission> badMissions = new ArrayList<>();
        List<Mission> goodMissions = new ArrayList<>();
        for (Mission m : missions) {
            if (m.sabotages > 0) {
                badMissions.add(m);
            } else {
                goodMissions.add(m);
            }
        }
        boolean calculating = true;
        while (calculating) {
            List<Player> seen = new ArrayList<>();
            List<Player> common = new ArrayList<>();
            for (Mission m : badMissions) {
                for (Player p : m.participants) {
                    if (seen.contains(p) && !common.contains(p)) {
                        common.add(p);
                    } else if (!seen.contains(p)) {
                        seen.add(p);
                    }
                }
            }
        }
        */
    }
    
    public List<String> getPlayerStrings() {
        List<String> names = new ArrayList<>();
        for (Player p : playerList) {
            names.add(String.format("%s%s     %.2f (%d-%d) %s",
                    p.dead ? "DEAD " : "",
                    p.name,
                    Math.abs(p.facistRating),
                    p.successes,
                    p.fails,
                    p.hitler ? "" : "(Confirmed Not Hitler)"));
        }
        return names;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        players = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        playerInfo = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        addPlayer = new javax.swing.JButton();
        addMission = new javax.swing.JButton();
        newGame = new javax.swing.JButton();
        deleteSelected = new javax.swing.JButton();
        notHitler = new javax.swing.JButton();
        deadButton = new javax.swing.JButton();
        deselect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Secret Hitler Tracker");
        setResizable(false);

        jScrollPane1.setViewportView(log);

        players.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        players.setCellRenderer(new secret.palpatine.PlayerCellRenderer());
        players.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playersMouseClicked(evt);
            }
        });
        players.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                playersKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(players);

        jLabel1.setText("Log:");

        jLabel2.setText("Players:");

        playerInfo.setColumns(20);
        playerInfo.setRows(5);
        jScrollPane3.setViewportView(playerInfo);

        jLabel3.setText("Player Info:");

        addPlayer.setText("Add Players");
        addPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerActionPerformed(evt);
            }
        });

        addMission.setText("Add Government");
        addMission.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMissionActionPerformed(evt);
            }
        });

        newGame.setText("New Game");
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });

        deleteSelected.setText("Delete Selected");
        deleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedActionPerformed(evt);
            }
        });

        notHitler.setText("Toggle Not Hilter");
        notHitler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notHitlerActionPerformed(evt);
            }
        });

        deadButton.setText("Toggle Dead");
        deadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deadButtonActionPerformed(evt);
            }
        });

        deselect.setText("Deselect All");
        deselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(newGame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addPlayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addMission, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deleteSelected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(notHitler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(deselect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPlayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addMission)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(notHitler)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteSelected)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newGame))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerActionPerformed
        JTextArea inputNames = new JTextArea(10, 20);
        JPanel panel = new JPanel(new GridLayout(1, 0));
        panel.add(new JScrollPane(inputNames));
        
        int result = JOptionPane.showConfirmDialog(null, panel, "Add a Player per line", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.CANCEL_OPTION)
            return;
        
        String[] names = inputNames.getText().split("\\n");
        
        for (String name : names) {
            name = name.trim();
            if (name.length() == 0) {
                continue;
            }
            
            boolean taken = false;
            
            for (Player p : playerList) {
                if (p.name.equalsIgnoreCase(name)) {
                    taken = true;
                    break;
                }
            }
            
            if (!taken) {
                playerList.add(new Player(name));
            }
        }
        
        refresh();
    }//GEN-LAST:event_addPlayerActionPerformed

    private void addMissionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMissionActionPerformed
        int[] indexes = players.getSelectedIndices();
        if (indexes.length > 0) {
            List<Player> goers = new ArrayList<>();
            for (int i : indexes) {
                goers.add(playerList.get(i));
            }
            int result = JOptionPane.showConfirmDialog(null, "Did " + Utils.createList(goers) + "'s government succeed?");
            System.out.println(result);
            if (result != 2) {
                governments.add(new Government(goers, result == 0));
                refresh();
            }
        }
    }//GEN-LAST:event_addMissionActionPerformed

    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameActionPerformed
        governments.clear();
        for (Player p : playerList) {
            p.dead = false;
            p.hitler = true;
        }
        refresh();
    }//GEN-LAST:event_newGameActionPerformed

    public void playersBoxAction() {
        int index = players.getSelectedIndex();
        if (index != -1) {
            Player p = playerList.get(index);
            playerInfo.setText(p.name + " has been in " + p.governments + " governments, " + p.fails + " of which failed.\n"
                    + "This gives them a " + (p.facistRating > 0 ? "facist" : "liberal") + " rating of " + Math.abs(p.facistRating) + ".");
        } else {
            playerInfo.setText("No player selected!");
        }
    }
    
    private void playersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playersMouseClicked
        playersBoxAction();
    }//GEN-LAST:event_playersMouseClicked

    private void deleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedActionPerformed
        int[] indexes = players.getSelectedIndices();
        List<Player> remove = new ArrayList<>();
        for (int i : indexes) {
            playerList.remove(playerList.get(i));
        }
        indexes = log.getSelectedIndices();
        for (int i : indexes) {
            governments.remove(governments.get(i));
        }
        refresh();
    }//GEN-LAST:event_deleteSelectedActionPerformed

    private void notHitlerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notHitlerActionPerformed
        int[] indexes = players.getSelectedIndices();
        for (int i : indexes) {
            Player p = playerList.get(i);
            p.hitler = !p.hitler;
        }
        refresh();
    }//GEN-LAST:event_notHitlerActionPerformed

    private void deadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deadButtonActionPerformed
        int[] indexes = players.getSelectedIndices();
        for (int i : indexes) {
            Player p = playerList.get(i);
            p.dead = !p.dead;
            if (p.dead) p.hitler = false;
        }
        refresh();
    }//GEN-LAST:event_deadButtonActionPerformed

    private void deselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectActionPerformed
        players.setSelectedIndices(new int[]{});
        playerInfo.setText("No player selected!");
        refresh();
    }//GEN-LAST:event_deselectActionPerformed

    private void playersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playersKeyReleased
       playersBoxAction();
    }//GEN-LAST:event_playersKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {}
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMission;
    private javax.swing.JButton addPlayer;
    private javax.swing.JButton deadButton;
    private javax.swing.JButton deleteSelected;
    private javax.swing.JButton deselect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> log;
    private javax.swing.JButton newGame;
    private javax.swing.JButton notHitler;
    private javax.swing.JTextArea playerInfo;
    private javax.swing.JList<String> players;
    // End of variables declaration//GEN-END:variables
}
